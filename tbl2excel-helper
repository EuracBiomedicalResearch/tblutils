#!/usr/bin/env perl
# tbl2excel-helper: tbl2excel Spreadsheet::WriteExcel helper
# Copyright(c) 2010 EURAC, Institute of Genetic Medicine
use warnings;
use strict;
use locale;
use Getopt::Std;
use Spreadsheet::WriteExcel;

# flags and arguments
my %flags;
getopts("h", \%flags);
my ($file) = @ARGV;
if(defined($flags{'h'}))
{
  print(STDERR qq{$0 [-h] [file]:
Write an Excel file to standard output (or into the specified file), using
simple one-line commands:

  ns [name]	Begin new worksheet (with "name")
  i y x n	Write integer n at xy
  bi y x n	Write bold integer n at xy
  d y x n	Write double n at xy
  bd y x n	Write bold double n at xy
  s y x s	Write string s at xy
  bs y x s	Write bold string s at xy

The following flags are supported:

  -h:	this help
});
  exit(2);
}

# output file
my $fd;

if($file) {
  open($fd, ">$file") or die("$!\n");
} else
{
  $fd = \*STDOUT;
  binmode($fd);
}

# define shared variables and formats
binmode(STDOUT);
my $wb = Spreadsheet::WriteExcel->new($fd);
my $ws = undef;

my $f_bold = $wb->add_format(bold => 1);
my $f_double = $wb->add_format(num_format => "0.000000");
my $f_bold_double = $wb->add_format(bold => 1, num_format => "0.000000");

while(<STDIN>)
{
  chomp;
  my ($cmd, $args) = /^(\S+)\s*(.*)/;

  if($cmd eq "ns")
  {
    $ws = $wb->add_worksheet($args);
  }
  elsif($cmd eq "i")
  {
    my ($y, $x, $n) = ($args =~ /^(\d+) (\d+) (.*)/);
    $ws->write_number($y, $x, $n);
  }
  elsif($cmd eq "bi")
  {
    my ($y, $x, $n) = ($args =~ /^(\d+) (\d+) (.*)/);
    $ws->write_number($y, $x, $n, $f_bold);
  }
  elsif($cmd eq "d")
  {
    my ($y, $x, $n) = ($args =~ /^(\d+) (\d+) (.*)/);
    $ws->write_number($y, $x, $n, $f_double);
  }
  elsif($cmd eq "bd")
  {
    my ($y, $x, $n) = ($args =~ /^(\d+) (\d+) (.*)/);
    $ws->write_number($y, $x, $n, $f_bold_double);
  }
  elsif($cmd eq "s")
  {
    my ($y, $x, $s) = ($args =~ /^(\d+) (\d+) (.*)/);
    $ws->write_string($y, $x, $s);
  }
  elsif($cmd eq "bs")
  {
    my ($y, $x, $s) = ($args =~ /^(\d+) (\d+) (.*)/);
    $ws->write_string($y, $x, $s, $f_bold);
  }
}
